<?php
/*
 * Plugin Name:       Render Command
 * Plugin URI:        https://github.com/austinginder/render-command
 * Description:       WP-CLI command to render HTML for a WordPress URL path. Use --without-plugins flag to exclude plugins from the request.
 * Version:           1.0.0
 * Author:            Austin Ginder
 * Author URI:        https://austinginder.com
 * License:           MIT
 * License URI:       https://opensource.org/licenses/MIT
 * Text Domain:       render-command
 *
 * Usage: wp render <url> [--without-plugins[=<plugins>]] [--format=<format>]
 * Example: wp render "/"
 * Example: wp render "/about/" --without-plugins
 * Example: wp render "/contact" --without-plugins="jetpack,wordpress-seo"
 * Example: wp render "/shop" --format=http_code
 */

namespace WP_CLI\RenderCommand;
use WP_CLI;
use WP_CLI\Utils;
use function register_activation_hook;
use function register_deactivation_hook;

if ( ! defined( 'RENDER_COMMAND_MU_PLUGIN_PATH' ) ) {
    define( 'RENDER_COMMAND_MU_PLUGIN_PATH', WPMU_PLUGIN_DIR . '/render-command.php' );
}

// Hook into plugin activation/deactivation within the namespace
register_activation_hook( __FILE__, __NAMESPACE__ . '\activate' );
register_deactivation_hook( __FILE__, __NAMESPACE__ . '\deactivate' );

/**
 * Generate a token for plugin exclusion based on AUTH_SALT.
 *
 * @return string
 */
function generate_exclusion_token() {
    $salt = defined( 'AUTH_SALT' ) && AUTH_SALT ? AUTH_SALT : 'render-command-fallback-salt';
    return hash_hmac( 'sha256', 'render-command-exclusion', $salt );
}

/**
 * Function to run on plugin activation.
 * Creates the mu-plugin file.
 */
function activate() {
    // Ensure the mu-plugins directory exists
    if ( ! \file_exists( WPMU_PLUGIN_DIR ) ) {
        \wp_mkdir_p( WPMU_PLUGIN_DIR );
    }

    // The content for the mu-plugin file
    $mu_plugin_content = <<<'PHP'
<?php
/**
 * MU Plugin for Render Command Plugin Exclusion.
 *
 * This file is automatically generated and managed by the Render Command plugin.
 * Do not edit directly.
 */

if ( ! function_exists( 'render_command_generate_exclusion_token_mu' ) ) {
    /**
     * Generate a token for plugin exclusion based on AUTH_SALT (MU Plugin version).
     * This function MUST mirror the one in the main plugin file.
     *
     * @return string
     */
    function render_command_generate_exclusion_token_mu() {
        $salt = defined( 'AUTH_SALT' ) && AUTH_SALT ? AUTH_SALT : 'render-command-fallback-salt';
        return hash_hmac( 'sha256', 'render-command-exclusion', $salt );
    }
}

if ( ! function_exists( 'render_command_handle_plugin_exclusion_logic_mu' ) ) {
    /**
     * Filters active plugins based on query parameters for the Render Command.
     *
     * @param array $plugins List of active plugin paths.
     * @return array Filtered list of active plugin paths.
     */
    function render_command_handle_plugin_exclusion_logic_mu( $plugins ) {
        // Only apply this logic on the frontend and if query parameters are set
        if ( is_admin() || ! isset( $_GET['exclude_plugins'], $_GET['exclusion_token'] ) ) {
            return $plugins;
        }

        // Validate the token
        $provided_token = sanitize_text_field( wp_unslash( $_GET['exclusion_token'] ) );
        $expected_token = render_command_generate_exclusion_token_mu();

        if ( ! hash_equals( $expected_token, $provided_token ) ) {
            error_log( 'Render Command: Invalid exclusion token provided in request.' );
            return $plugins; // Token mismatch, do not modify plugins
        }

        $exclude_param_value = sanitize_text_field( wp_unslash( $_GET['exclude_plugins'] ) );

        // Check if we need to exclude ALL plugins
        if ( $exclude_param_value === '__ALL__' ) {
            // Return empty array to deactivate all plugins for this request
            return [];
        }

        // Proceed with excluding specific plugins if not '__ALL__'
        $plugins_to_exclude_slugs = array_map( 'trim', explode( ',', $exclude_param_value ) );
        $plugins_to_exclude_slugs = array_filter( $plugins_to_exclude_slugs ); // Remove empty entries

        if ( empty( $plugins_to_exclude_slugs ) ) {
            // Handle cases like exclude_plugins="" or exclude_plugins="," after trimming/filtering
            return $plugins;
        }

        $updated_plugins = [];

        // Iterate through active plugins and exclude based on partial match
        foreach ( $plugins as $plugin_path ) {
            $exclude = false;
            // Extract the base slug from the plugin path (e.g., "jetpack/jetpack.php" -> "jetpack")
            $plugin_slug = dirname( $plugin_path );
            if ( $plugin_slug === '.' ) { // Handle plugins directly in the plugins root (e.g., hello.php)
                $plugin_slug = basename( $plugin_path, '.php' );
            } else {
                 $plugin_slug = basename( $plugin_slug ); // Get the folder name
            }

            foreach ( $plugins_to_exclude_slugs as $slug_to_exclude ) {
                // Check if the extracted plugin slug matches the slug to exclude
                if ( $plugin_slug === $slug_to_exclude ) {
                    $exclude = true;
                    break; // No need to check other slugs for this plugin
                }
                // Also check if the full path starts with the slug (covers cases like plugin/plugin.php)
                 if ( strpos( $plugin_path, $slug_to_exclude . '/' ) === 0 ) {
                     $exclude = true;
                     break;
                 }
            }

            // If the plugin should not be excluded, add it to the updated list
            if ( ! $exclude ) {
                $updated_plugins[] = $plugin_path;
            }
        }

        return $updated_plugins;
    }
}

// Add the filter with priority
add_filter( 'option_active_plugins', 'render_command_handle_plugin_exclusion_logic_mu', 9999, 1 );

PHP;

    // Write the content to the mu-plugin file
    // Use file_put_contents with LOCK_EX for atomic writes
    if ( false === \file_put_contents( RENDER_COMMAND_MU_PLUGIN_PATH, $mu_plugin_content, LOCK_EX ) ) {
        // Optionally add error handling if the write fails
        error_log( 'Render Command: Failed to write mu-plugin file at ' . RENDER_COMMAND_MU_PLUGIN_PATH );
    } else {
        // Attempt to set permissions (optional, depends on server setup)
        @chmod( RENDER_COMMAND_MU_PLUGIN_PATH, 0644 );
    }
}


/**
 * Function to run on plugin deactivation.
 * Removes the mu-plugin file.
 */
function deactivate() {
    // Check if the mu-plugin file exists before attempting to delete
    if ( \file_exists( RENDER_COMMAND_MU_PLUGIN_PATH ) ) {
        if ( false === \unlink( RENDER_COMMAND_MU_PLUGIN_PATH ) ) {
            // Optionally add error handling if the delete fails
             error_log( 'Render Command: Failed to delete mu-plugin file at ' . RENDER_COMMAND_MU_PLUGIN_PATH );
        }
    }
}

class RenderCommand {

    /**
     * Render a WordPress page and output the result based on format.
     *
     * ## OPTIONS
     *
     * <path>
     * : The URL path to render (e.g., "/about-us/").
     *
     * [--without-plugins[=<plugins>]]
     * : Exclude plugins for the request. If the flag is provided without a value,
     *   all plugins are excluded. If a comma-separated list of plugin slugs
     *   is provided (e.g., "jetpack,wordpress-seo"), only those specific plugins
     *   are excluded. Requires a valid AUTH_SALT defined in wp-config.php.
     *
     * [--format=<format>]
     * : Determine the output format.
     *   ---
     *   default: raw
     *   options:
     *     - raw
     *     - http_code
     *   ---
     *
     * ## EXAMPLES
     *
     *     # Get raw HTML for the homepage
     *     wp render "/"
     *
     *     # Get raw HTML for /about-us/ excluding ALL plugins
     *     wp render "/about-us/" --without-plugins
     *
     *     # Get raw HTML for /about-us/ excluding jetpack and wordpress-seo
     *     wp render "/about-us/" --without-plugins="jetpack,wordpress-seo"
     *
     *     # Get only the HTTP status code for /contact excluding ALL plugins
     *     wp render "/contact" --without-plugins --format=http_code
     *
     * @when after_wp_load
     *
     * @param array $args      Positional arguments.
     * @param array $assoc_args Associative arguments.
     */
    public function __invoke( array $args, array $assoc_args ) {
        if ( empty( $args[0] ) ) {
            WP_CLI::error( 'Please provide a path to render.' );
        }

        $path = $args[0];
        // Use get_flag_value to handle flag presence and value correctly
        $without_plugins_value = Utils\get_flag_value( $assoc_args, 'without-plugins', null );
        $plugins_to_exclude_param = null; // The value for the 'exclude_plugins' query parameter
        $expected_token = null;

        // Check if the --without-plugins flag is present in any form
        if ( $without_plugins_value !== null ) {
            // Check if AUTH_SALT is defined and not empty
            if ( ! defined( 'AUTH_SALT' ) || ! AUTH_SALT ) {
                 WP_CLI::error( 'The --without-plugins flag requires AUTH_SALT to be defined and non-empty in your wp-config.php for security.' );
            }

            $expected_token = generate_exclusion_token();

            if ( $without_plugins_value === true ) {
                // Flag is present without a value: exclude all plugins
                $plugins_to_exclude_param = '__ALL__'; // Special value recognized by mu-plugin
                WP_CLI::log( 'Requesting URL excluding ALL plugins.' );
            } elseif ( is_string( $without_plugins_value ) && ! empty( $without_plugins_value ) ) {
                // Flag has a value (list of plugins)
                $plugins_to_exclude_param = $without_plugins_value; // Pass the list directly
                 WP_CLI::log( 'Requesting URL excluding specific plugins: ' . $plugins_to_exclude_param );
            } else {
                // Handle edge case: --without-plugins="" (treat as exclude none)
                WP_CLI::warning( 'Empty value provided for --without-plugins. No plugins will be excluded.' );
                 $expected_token = null; // Don't add exclusion params if value is empty/invalid
            }
        }

        // Get the format, default to 'raw'
        $format = Utils\get_flag_value( $assoc_args, 'format', 'raw' );

        // Validate format
        if ( ! in_array( $format, [ 'raw', 'http_code' ] ) ) {
            WP_CLI::error( "Invalid format specified. Available formats: 'raw', 'http_code'." );
        }

        // Build the full URL
        $url = site_url( $path );

        // Add query parameters only if exclusion is requested and token is generated
        if ( $plugins_to_exclude_param !== null && $expected_token ) {
            $query_params = [
                'exclude_plugins' => $plugins_to_exclude_param,
                'exclusion_token' => $expected_token,
            ];
            $url = add_query_arg( $query_params, $url ); // Use WP function for adding query args
            WP_CLI::log( 'Requesting URL with exclusion parameters: ' . $url );
        } else {
             WP_CLI::log( 'Requesting URL: ' . $url );
        }

        // Make the request
        $response = wp_remote_get( $url, [
            'timeout'   => 120,
            'sslverify' => false
        ] );

        if ( is_wp_error( $response ) ) {
            WP_CLI::error( 'Request failed: ' . $response->get_error_message() );
        }

        // Output based on the requested format
        if ( 'http_code' === $format ) {
            $http_code = wp_remote_retrieve_response_code( $response );
            if ( $http_code ) {
                WP_CLI::line( (string) $http_code );
            } else {
                WP_CLI::warning( 'Could not retrieve HTTP status code, although the request seemed successful.' );
            }
        } else { // Default to 'raw' format
            $body = wp_remote_retrieve_body( $response );
            // Check if the response body indicates a token error from the mu-plugin side
            // (This is less likely now with token check before filtering, but good as a fallback)
            if ( strpos( $body, 'Invalid exclusion token' ) !== false ) {
                 WP_CLI::warning( 'The server reported an invalid exclusion token. Ensure AUTH_SALT is consistent.' );
            }
            WP_CLI::line( $body );
        }
    }
}

// Register the command only if WP-CLI is running
if ( defined( 'WP_CLI' ) && WP_CLI ) {
    WP_CLI::add_command( 'render', __NAMESPACE__ . '\RenderCommand' );
}
